name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:    # Allows manual triggering from GitHub UI

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get complete git history for version tagging

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate version tag
        id: vars
        run: |
          # Create a unique version using commit hash and timestamp
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "VERSION=${SHORT_SHA}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            epiphanylyz/comunity:backend-latest
            epiphanylyz/comunity:backend-${{ steps.vars.outputs.VERSION }}
          build-args: |
            BUILD_VERSION=${{ steps.vars.outputs.VERSION }}
          no-cache: true  # Force rebuild to ensure latest code is used

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            epiphanylyz/comunity:frontend-latest
            epiphanylyz/comunity:frontend-${{ steps.vars.outputs.VERSION }}
          build-args: |
            REACT_APP_API_URL=/api
            REACT_APP_BUILD_VERSION=${{ steps.vars.outputs.VERSION }}
            REACT_APP_BUILD_TIME=${{ steps.vars.outputs.TIMESTAMP }}
          no-cache: true  # Force rebuild to ensure latest code is used

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment files
        run: |
          # Create version.txt for frontend container
          echo "Version: $(date)" > version.txt
          echo "Build: ${{ steps.vars.outputs.VERSION }}" >> version.txt
          
          # Create .env file with all necessary environment variables
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "DEPLOY_TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> .env

      - name: Copy deployment files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env,version.txt"
          target: "~/comunity/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the directory with docker-compose.yml
            cd ~/comunity/
            
            # Export deployment timestamp
            export DEPLOY_TIMESTAMP=$(cat .env | grep DEPLOY_TIMESTAMP | cut -d= -f2)
            echo "Deploying with timestamp: $DEPLOY_TIMESTAMP"
            
            # Force pull the latest images (with no-cache)
            docker-compose pull --no-cache backend frontend
            
            # Stop and remove existing containers (to force clean restart)
            docker-compose stop backend frontend
            docker-compose rm -f backend frontend
            
            # Start containers with new images
            docker-compose up -d backend frontend
            
            # Copy version file into frontend container
            if [ -f "version.txt" ]; then
              docker cp version.txt comunity-frontend:/usr/share/nginx/html/version.txt
            fi
            
            # Force reload frontend Nginx configuration
            docker exec comunity-frontend nginx -s reload
            
            # Restart host Nginx to clear any proxy caches
            sudo systemctl restart nginx
            
            # Log deployment time for record keeping
            echo "Deployment completed at $(date) - Version: $DEPLOY_TIMESTAMP" >> deploy.log
            
            # Verify that the containers are running
            docker ps | grep 'comunity-backend\|comunity-frontend'
            
            # Cleanup unused images to save disk space
            docker image prune -f

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Check if the containers are running properly
            cd ~/comunity/
            
            echo "Checking backend status..."
            if docker ps | grep -q comunity-backend; then
              echo "Backend container is running"
            else
              echo "Backend container failed to start"
              docker logs comunity-backend
              exit 1
            fi
            
            echo "Checking frontend status..."
            if docker ps | grep -q comunity-frontend; then
              echo "Frontend container is running"
            else
              echo "Frontend container failed to start"
              docker logs comunity-frontend
              exit 1
            fi
            
            # echo "Checking backend health..."
            # if curl -s http://localhost:5000/api/health | grep -q "ok"; then
            #   echo "Backend is healthy"
            # else
            #   echo "Backend health check failed"
            #   exit 1
            # fi
            
            echo "DEPLOYMENT VERIFICATION COMPLETE - SUCCESS"
            exit 0