name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:    # Allows manual trigger

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/comunity:backend-latest

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/comunity:frontend-latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/comunity:backend-latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/comunity:frontend-latest
            
            # Stop and remove old containers
            docker stop comunity-backend || true
            docker stop comunity-frontend || true
            docker rm comunity-backend || true
            docker rm comunity-frontend || true
            
            # Start new containers
            docker run -d --name comunity-backend \
              -p 5000:5000 \
              -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
              -e DB_USERNAME='${{ secrets.DB_USERNAME }}' \
              -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e DB_HOST='${{ secrets.DB_HOST }}' \
              -e DB_PORT='${{ secrets.DB_PORT }}' \
              -e DB_NAME='${{ secrets.DB_NAME }}' \
              -e AWS_REGION='${{ secrets.AWS_REGION }}' \
              -e PYTHONPATH=/comunity \
              ${{ secrets.DOCKER_USERNAME }}/comunity:backend-latest
            
            docker run -d --name comunity-frontend \
              -p 8080:80 \
              ${{ secrets.DOCKER_USERNAME }}/comunity:frontend-latest
            
            # Verify containers are running
            docker ps | grep comunity
